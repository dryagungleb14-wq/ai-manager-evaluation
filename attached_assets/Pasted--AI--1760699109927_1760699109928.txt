## ТЗ: Пилотный AI‑сервис оценки работы менеджеров (звонки и переписки)

### Цель
Создать простой веб‑сервис, который:
- слушает/обрабатывает звонки и переписки менеджеров;
- проверяет разговор по заранее заданному **чек‑листу**;
- автоматически выявляет **возражения**, формулирует **суть разговора** и фиксирует **итог** (к чему пришли);
- формирует два отчёта: **Отчёт по чек‑листу** и **Отчёт по возражениям/содержанию**;
- разворачивается в **Replit** для пилота и может быть опубликован на **Vercel**, а также локально запускаться на компьютере менеджера (браузер + локальный сервер).

### Область пилота и допущения
- Работаем с **после‑фактум аудио** (загрузка файла) и **готовым текстом переписки** (копипаст/файл). Онлайн‑стриминг звонка — вне пилота.
- Распознавание речи — через внешнее **ASR API** (напр. Whisper API), анализ — через **LLM API** (напр. OpenAI/Gemini/Claude). Модели настраиваются через ENV без жёсткой привязки.
- Данные хранятся **временно** в памяти/файлах (без постоянной БД) для простоты пилота.
- Чек‑лист создаётся и редактируется в UI, хранится локально (JSON) и может импортироваться/экспортироваться.
- Язык разговоров: RU/EN — поддержка обоих, автоопределение.

### Пользовательские сценарии
1. **Загрузка звонка**: менеджер загружает аудиофайл (mp3/wav/m4a), сервис распознаёт речь, проверяет чек‑лист, выявляет возражения/суть/итог и выдаёт два отчёта.
2. **Ввод переписки**: менеджер вставляет текст диалога (или загружает .txt/.md), сервис анализирует и выдаёт два отчёта.
3. **Управление чек‑листом**: создать, редактировать, упорядочивать пункты; сохранять наборы чек‑листов; переключаться между ними.
4. **Экспорт отчётов**: скачать **PDF/Markdown** или копировать как текст.
5. **Приватность**: локальный режим — без отправки сырого аудио/текста наружу (опционально: оффлайн ASR/LLM позже, не в пилоте).

### Требования к интерфейсу (Web UI)
- **Главный экран**: вкладки **Звонок** и **Переписка**; справа — выбор активного чек‑листа.
- **Звонок**:
  - Зона загрузки аудио (drag&drop + кнопка), отображение прогресса распознавания.
  - Поле предпросмотра расшифровки (редактируемое).
  - Кнопка «Проверить» запускает анализ.
- **Переписка**:
  - Большое текстовое поле (многострочное) + загрузка .txt.
  - Кнопка «Проверить» запускает анализ.
- **Чек‑лист**:
  - Список пунктов с типами: **обязательный**, **рекомендуемый**, **запрещённый** (напр. «обещания без оснований»).
  - Для каждого пункта: заголовок, описание, критерии распознавания (ключевые фразы/индикаторы), порог уверенности.
  - Кнопки: «Создать», «Дубликат», «Экспорт JSON», «Импорт JSON».
- **Результаты**:
  - Карточка **Отчёт по чек‑листу**: статус пунктов (выполнен/не выполнен/сомнительно), комментарии, цитаты из диалога с таймкодами (для звонка).
  - Карточка **Отчёт по возражениям и содержанию**: список возражений (категории, аргументы менеджера, успешность обработки), **суть разговора** (1–3 предложения), **итог** (договорённости/следующие шаги).
  - Кнопки экспорта: **PDF**, **MD**.
- **Настройки**:
  - Ключи API (**ASR**, **LLM**) через ENV.
  - Выбор языка/автоопределение.
  - Лимиты длины входа (для пилота).

### Формат чек‑листа (JSON)
```json
{
  "name": "Продажи B2B — базовый",
  "version": "1.0",
  "items": [
    {
      "id": "greeting",
      "title": "Приветствие и представление",
      "type": "mandatory",
      "criteria": {
        "positive_patterns": ["добрый день", "здравствуйте", "меня зовут", "компания"],
        "negative_patterns": [],
        "llm_hint": "Оценить наличие корректного приветствия и представления компании/менеджера."
      },
      "confidence_threshold": 0.6
    },
    {
      "id": "needs",
      "title": "Выявление потребностей",
      "type": "mandatory",
      "criteria": {
        "llm_hint": "Проверить, задавались ли вопросы для понимания задач клиента."
      },
      "confidence_threshold": 0.65
    }
  ]
}
```

### Формат отчётов (вывод)
- **Отчёт по чек‑листу** (JSON/MD):
  - **meta**: источник (звонок/переписка), язык, дата анализа, длительность/объём.
  - **items**: для каждого пункта — статус: **passed/failed/uncertain**, **score** (0–1), **evidence** (цитаты и таймкоды).
  - **summary**: краткая сводка выполнения чек‑листа.
- **Отчёт по возражениям и содержанию**:
  - **topics**: ключевые темы/аспекты обсуждения.
  - **objections**: список возражений: категория, формулировка клиента, ответ менеджера, оценка обработки (**handled/unhandled/partial**), рекомендации.
  - **conversation_essence**: 1–3 предложения о сути.
  - **outcome**: фиксированный итог (что договорились, **next steps**).

### Логика и пайплайн обработки
1. **Вход**:
   - Звонок: загрузка аудио → **ASR** → расшифровка (с таймкодами).
   - Переписка: текст → нормализация (спикеры, разметка).
2. **Предобработка**:
   - Детект языка, сегментация по репликам, спикеризация (если метки доступны).
   - Извлечение возможных **ключевых фраз** (n‑grams).
3. **Аналитика (LLM + правила)**:
   - Проверка **чек‑листа**:
     - быстрые эвристики по **positive/negative patterns**;
     - LLM‑оценка по **llm_hint** + цитаты.
   - Обнаружение **возражений**:
     - эвристики по картотеке возражений (например: цена, сроки, доверие, конкурент, функционал);
     - LLM‑классификация, извлечение формулировок и ответов менеджера, оценка обработки.
   - **Суть** и **итог**: генерация краткого резюме и результата диалога.
4. **Вывод**:
   - Формирование двух отчётов в JSON и представление в UI (MD/PDF).
   - Сохранение временных файлов (при локальном режиме — на диск).

### Архитектура (для Replit/Vercel пилота)
- **Frontend**: React (Vite) или Next.js (SPA/SSR не критично для пилота).
- **Backend**: Node.js (**Express**) — API для:
  - /api/transcribe (POST audio) → вызов **ASR API** → транскрипт;
  - /api/analyze (POST transcript + checklist) → **LLM API** + эвристики → два отчёта;
  - /api/checklists (CRUD локальных JSON);
  - /api/export (POST report) → PDF/MD бинарник.
- **Интеграции**:
  - ASR: настроить через ENV (**ASR_API_KEY**, **ASR_MODEL**).
  - LLM: через ENV (**LLM_API_KEY**, **LLM_MODEL**).
- **Хранение**:
  - В пилоте — **in‑memory** + локальные JSON (Replit Files / Vercel временно).
  - Без постоянной БД. Опционально: добавление LiteDB позже.

### API спецификация (минимум)
- **POST /api/transcribe**
  - вход: multipart/form-data { file: audio }
  - выход: { transcript: [{start, end, speaker?, text}], language }
- **POST /api/analyze**
  - вход: { transcript|text, language?, checklistJson }
  - выход: {
    checklistReport: { meta, items: [{id, title, status, score, evidence: [{text, start?, end?}]}], summary },
    objectionsReport: { topics, objections: [{category, clientPhrase, managerReply, handling: "handled|partial|unhandled", advice}], conversation_essence, outcome }
  }
- **GET/POST /api/checklists**
  - CRUD: список, сохранение, загрузка, импорт/экспорт.
- **POST /api/export**
  - вход: { reportType: "checklist|objections", format: "pdf|md", payload }
  - выход: бинарный файл.

### Критерии качества и метрики пилота
- **ASR точность**: слово‑в‑слово (WER), приемлемо для пилота ≥ 85% на чистой записи.
- **Детект возражений**: точность ≥ 0.7 на разметке 20–30 тестовых диалогов.
- **Полезность отчёта**: опрос менеджеров (Likert 1–5), цель ≥ 4.
- **Скорость**: полный цикл < 60 сек на 5–10 минут аудио (с облачным ASR/LLM).
- **Надёжность**: graceful‑ошибки, прогресс‑индикаторы, повтор запроса.

### Безопасность и приватность
- ENV‑ключи не показывать в UI.
- В локальном режиме: опция отключить отправку сырого контента в облачные API (если доступны оффлайн модели — вне пилота).
- Удаление временных файлов после анализа (конфигурируемо).

### Развёртывание
- **Replit**:
  - Репозиторий: Node.js + React/Next.js.
  - ENV: ASR_API_KEY, LLM_API_KEY, ASR_MODEL, LLM_MODEL.
  - Запуск: npm run dev (frontend) + npm run server (backend) или один сервер, отдающий сборку фронта.
- **Vercel**:
  - Next.js предпочтителен: API Routes для /api/*.
  - Секреты: через Vercel Environment Variables.
  - Ограничения по времени функций — учесть (возможен редирект на долгие задачи).
- **Локально (компьютер менеджера)**:
  - Node.js LTS, npm install, npm run build, npm run start.
  - Открыть http://localhost:3000 в браузере.

### План работ (MVP)
1. UI: Загрузка аудио/текста + предпросмотр транскрипта.
2. Интеграция **ASR**: поддержка RU/EN, таймкоды.
3. Модель чек‑листа: CRUD + хранение JSON.
4. Анализ **LLM**: чек‑лист + возражения/суть/итог.
5. Отчёты: рендер в UI + экспорт MD/PDF.
6. Развёртывание в Replit; затем билд на Vercel.

### Примеры вывода (сокр.)
- **Отчёт по чек‑листу**:
  - Приветствие: passed (0.82). Evidence: «Здравствуйте, меня зовут…» [00:00–00:04].
  - Выявление потребностей: partial (0.58). Комментарий: задавал один уточняющий вопрос.
- **Отчёт по возражениям**:
  - Категория: Цена. Клиент: «Дорого». Ответ: «Есть скидка при годовом контракте». Статус: handled. Рекомендация: уточнить ценность по KPI.
  - Суть: «Менеджер презентовал продукт, клиент сомневается из‑за цены».
  - Итог: «Отправить коммерческое предложение, созвон в четверг».

### Ограничения пилота
- Нет реального звонкового стриминга и записи с линии.
- Нет постоянного хранилища и роли/доступов.
- Качество отчётов зависит от выбранных ASR/LLM.

### Успех пилота
- Менеджеры могут загрузить свои звонки/переписки и получить два отчёта за ≤ 1 минуту.
- Руководитель может настроить чек‑лист под команду и экспортировать отчёты.